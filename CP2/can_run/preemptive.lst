                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module preemptive
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _myTimer0Handler
                                     12 	.globl _Bootstrap
                                     13 	.globl _main
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _F1
                                     21 	.globl _P
                                     22 	.globl _PS
                                     23 	.globl _PT1
                                     24 	.globl _PX1
                                     25 	.globl _PT0
                                     26 	.globl _PX0
                                     27 	.globl _RD
                                     28 	.globl _WR
                                     29 	.globl _T1
                                     30 	.globl _T0
                                     31 	.globl _INT1
                                     32 	.globl _INT0
                                     33 	.globl _TXD
                                     34 	.globl _RXD
                                     35 	.globl _P3_7
                                     36 	.globl _P3_6
                                     37 	.globl _P3_5
                                     38 	.globl _P3_4
                                     39 	.globl _P3_3
                                     40 	.globl _P3_2
                                     41 	.globl _P3_1
                                     42 	.globl _P3_0
                                     43 	.globl _EA
                                     44 	.globl _ES
                                     45 	.globl _ET1
                                     46 	.globl _EX1
                                     47 	.globl _ET0
                                     48 	.globl _EX0
                                     49 	.globl _P2_7
                                     50 	.globl _P2_6
                                     51 	.globl _P2_5
                                     52 	.globl _P2_4
                                     53 	.globl _P2_3
                                     54 	.globl _P2_2
                                     55 	.globl _P2_1
                                     56 	.globl _P2_0
                                     57 	.globl _SM0
                                     58 	.globl _SM1
                                     59 	.globl _SM2
                                     60 	.globl _REN
                                     61 	.globl _TB8
                                     62 	.globl _RB8
                                     63 	.globl _TI
                                     64 	.globl _RI
                                     65 	.globl _P1_7
                                     66 	.globl _P1_6
                                     67 	.globl _P1_5
                                     68 	.globl _P1_4
                                     69 	.globl _P1_3
                                     70 	.globl _P1_2
                                     71 	.globl _P1_1
                                     72 	.globl _P1_0
                                     73 	.globl _TF1
                                     74 	.globl _TR1
                                     75 	.globl _TF0
                                     76 	.globl _TR0
                                     77 	.globl _IE1
                                     78 	.globl _IT1
                                     79 	.globl _IE0
                                     80 	.globl _IT0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _B
                                     90 	.globl _ACC
                                     91 	.globl _PSW
                                     92 	.globl _IP
                                     93 	.globl _P3
                                     94 	.globl _IE
                                     95 	.globl _P2
                                     96 	.globl _SBUF
                                     97 	.globl _SCON
                                     98 	.globl _P1
                                     99 	.globl _TH1
                                    100 	.globl _TH0
                                    101 	.globl _TL1
                                    102 	.globl _TL0
                                    103 	.globl _TMOD
                                    104 	.globl _TCON
                                    105 	.globl _PCON
                                    106 	.globl _DPH
                                    107 	.globl _DPL
                                    108 	.globl _SP
                                    109 	.globl _P0
                                    110 	.globl _bitmap
                                    111 	.globl _i
                                    112 	.globl _new_stk
                                    113 	.globl _temp_PSW
                                    114 	.globl _temp_SP
                                    115 	.globl _savedSP
                                    116 	.globl _newID
                                    117 	.globl _nextID
                                    118 	.globl _currID
                                    119 	.globl _ThreadCreate
                                    120 	.globl _ThreadYield
                                    121 	.globl _ThreadExit
                                    122 ;--------------------------------------------------------
                                    123 ; special function registers
                                    124 ;--------------------------------------------------------
                                    125 	.area RSEG    (ABS,DATA)
      000000                        126 	.org 0x0000
                           000080   127 _P0	=	0x0080
                           000081   128 _SP	=	0x0081
                           000082   129 _DPL	=	0x0082
                           000083   130 _DPH	=	0x0083
                           000087   131 _PCON	=	0x0087
                           000088   132 _TCON	=	0x0088
                           000089   133 _TMOD	=	0x0089
                           00008A   134 _TL0	=	0x008a
                           00008B   135 _TL1	=	0x008b
                           00008C   136 _TH0	=	0x008c
                           00008D   137 _TH1	=	0x008d
                           000090   138 _P1	=	0x0090
                           000098   139 _SCON	=	0x0098
                           000099   140 _SBUF	=	0x0099
                           0000A0   141 _P2	=	0x00a0
                           0000A8   142 _IE	=	0x00a8
                           0000B0   143 _P3	=	0x00b0
                           0000B8   144 _IP	=	0x00b8
                           0000D0   145 _PSW	=	0x00d0
                           0000E0   146 _ACC	=	0x00e0
                           0000F0   147 _B	=	0x00f0
                                    148 ;--------------------------------------------------------
                                    149 ; special function bits
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0_0	=	0x0080
                           000081   154 _P0_1	=	0x0081
                           000082   155 _P0_2	=	0x0082
                           000083   156 _P0_3	=	0x0083
                           000084   157 _P0_4	=	0x0084
                           000085   158 _P0_5	=	0x0085
                           000086   159 _P0_6	=	0x0086
                           000087   160 _P0_7	=	0x0087
                           000088   161 _IT0	=	0x0088
                           000089   162 _IE0	=	0x0089
                           00008A   163 _IT1	=	0x008a
                           00008B   164 _IE1	=	0x008b
                           00008C   165 _TR0	=	0x008c
                           00008D   166 _TF0	=	0x008d
                           00008E   167 _TR1	=	0x008e
                           00008F   168 _TF1	=	0x008f
                           000090   169 _P1_0	=	0x0090
                           000091   170 _P1_1	=	0x0091
                           000092   171 _P1_2	=	0x0092
                           000093   172 _P1_3	=	0x0093
                           000094   173 _P1_4	=	0x0094
                           000095   174 _P1_5	=	0x0095
                           000096   175 _P1_6	=	0x0096
                           000097   176 _P1_7	=	0x0097
                           000098   177 _RI	=	0x0098
                           000099   178 _TI	=	0x0099
                           00009A   179 _RB8	=	0x009a
                           00009B   180 _TB8	=	0x009b
                           00009C   181 _REN	=	0x009c
                           00009D   182 _SM2	=	0x009d
                           00009E   183 _SM1	=	0x009e
                           00009F   184 _SM0	=	0x009f
                           0000A0   185 _P2_0	=	0x00a0
                           0000A1   186 _P2_1	=	0x00a1
                           0000A2   187 _P2_2	=	0x00a2
                           0000A3   188 _P2_3	=	0x00a3
                           0000A4   189 _P2_4	=	0x00a4
                           0000A5   190 _P2_5	=	0x00a5
                           0000A6   191 _P2_6	=	0x00a6
                           0000A7   192 _P2_7	=	0x00a7
                           0000A8   193 _EX0	=	0x00a8
                           0000A9   194 _ET0	=	0x00a9
                           0000AA   195 _EX1	=	0x00aa
                           0000AB   196 _ET1	=	0x00ab
                           0000AC   197 _ES	=	0x00ac
                           0000AF   198 _EA	=	0x00af
                           0000B0   199 _P3_0	=	0x00b0
                           0000B1   200 _P3_1	=	0x00b1
                           0000B2   201 _P3_2	=	0x00b2
                           0000B3   202 _P3_3	=	0x00b3
                           0000B4   203 _P3_4	=	0x00b4
                           0000B5   204 _P3_5	=	0x00b5
                           0000B6   205 _P3_6	=	0x00b6
                           0000B7   206 _P3_7	=	0x00b7
                           0000B0   207 _RXD	=	0x00b0
                           0000B1   208 _TXD	=	0x00b1
                           0000B2   209 _INT0	=	0x00b2
                           0000B3   210 _INT1	=	0x00b3
                           0000B4   211 _T0	=	0x00b4
                           0000B5   212 _T1	=	0x00b5
                           0000B6   213 _WR	=	0x00b6
                           0000B7   214 _RD	=	0x00b7
                           0000B8   215 _PX0	=	0x00b8
                           0000B9   216 _PT0	=	0x00b9
                           0000BA   217 _PX1	=	0x00ba
                           0000BB   218 _PT1	=	0x00bb
                           0000BC   219 _PS	=	0x00bc
                           0000D0   220 _P	=	0x00d0
                           0000D1   221 _F1	=	0x00d1
                           0000D2   222 _OV	=	0x00d2
                           0000D3   223 _RS0	=	0x00d3
                           0000D4   224 _RS1	=	0x00d4
                           0000D5   225 _F0	=	0x00d5
                           0000D6   226 _AC	=	0x00d6
                           0000D7   227 _CY	=	0x00d7
                                    228 ;--------------------------------------------------------
                                    229 ; overlayable register banks
                                    230 ;--------------------------------------------------------
                                    231 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        232 	.ds 8
                                    233 ;--------------------------------------------------------
                                    234 ; internal ram data
                                    235 ;--------------------------------------------------------
                                    236 	.area DSEG    (DATA)
                           000031   237 _currID	=	0x0031
                           000032   238 _nextID	=	0x0032
                           000033   239 _newID	=	0x0033
                           000037   240 _savedSP	=	0x0037
                           00003B   241 _temp_SP	=	0x003b
                           00003C   242 _temp_PSW	=	0x003c
                           00003D   243 _new_stk	=	0x003d
                           00003E   244 _i	=	0x003e
                                    245 ;--------------------------------------------------------
                                    246 ; overlayable items in internal ram
                                    247 ;--------------------------------------------------------
                                    248 	.area	OSEG    (OVR,DATA)
                                    249 ;--------------------------------------------------------
                                    250 ; indirectly addressable internal ram data
                                    251 ;--------------------------------------------------------
                                    252 	.area ISEG    (DATA)
                                    253 ;--------------------------------------------------------
                                    254 ; absolute internal ram data
                                    255 ;--------------------------------------------------------
                                    256 	.area IABS    (ABS,DATA)
      000030                        257 	.org 0x0030
      000030                        258 _bitmap::
      000030                        259 	.ds 1
                                    260 	.area IABS    (ABS,DATA)
                                    261 ;--------------------------------------------------------
                                    262 ; bit data
                                    263 ;--------------------------------------------------------
                                    264 	.area BSEG    (BIT)
      000000                        265 _ThreadYield_sloc0_1_0:
      000000                        266 	.ds 1
                                    267 ;--------------------------------------------------------
                                    268 ; paged external ram data
                                    269 ;--------------------------------------------------------
                                    270 	.area PSEG    (PAG,XDATA)
                                    271 ;--------------------------------------------------------
                                    272 ; external ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area XSEG    (XDATA)
                                    275 ;--------------------------------------------------------
                                    276 ; absolute external ram data
                                    277 ;--------------------------------------------------------
                                    278 	.area XABS    (ABS,XDATA)
                                    279 ;--------------------------------------------------------
                                    280 ; external initialized ram data
                                    281 ;--------------------------------------------------------
                                    282 	.area XISEG   (XDATA)
                                    283 	.area HOME    (CODE)
                                    284 	.area GSINIT0 (CODE)
                                    285 	.area GSINIT1 (CODE)
                                    286 	.area GSINIT2 (CODE)
                                    287 	.area GSINIT3 (CODE)
                                    288 	.area GSINIT4 (CODE)
                                    289 	.area GSINIT5 (CODE)
                                    290 	.area GSINIT  (CODE)
                                    291 	.area GSFINAL (CODE)
                                    292 	.area CSEG    (CODE)
                                    293 ;--------------------------------------------------------
                                    294 ; global & static initialisations
                                    295 ;--------------------------------------------------------
                                    296 	.area HOME    (CODE)
                                    297 	.area GSINIT  (CODE)
                                    298 	.area GSFINAL (CODE)
                                    299 	.area GSINIT  (CODE)
                                    300 ;	preemptive.c:17: __data __at (0x30) char bitmap = 0x00;
      000000 75*30 00         [24]  301 	mov	_bitmap,#0x00
                                    302 ;--------------------------------------------------------
                                    303 ; Home
                                    304 ;--------------------------------------------------------
                                    305 	.area HOME    (CODE)
                                    306 	.area HOME    (CODE)
                                    307 ;--------------------------------------------------------
                                    308 ; code
                                    309 ;--------------------------------------------------------
                                    310 	.area CSEG    (CODE)
                                    311 ;------------------------------------------------------------
                                    312 ;Allocation info for local variables in function 'Bootstrap'
                                    313 ;------------------------------------------------------------
                                    314 ;	preemptive.c:83: void Bootstrap(void)
                                    315 ;	-----------------------------------------
                                    316 ;	 function Bootstrap
                                    317 ;	-----------------------------------------
      000000                        318 _Bootstrap:
                           000007   319 	ar7 = 0x07
                           000006   320 	ar6 = 0x06
                           000005   321 	ar5 = 0x05
                           000004   322 	ar4 = 0x04
                           000003   323 	ar3 = 0x03
                           000002   324 	ar2 = 0x02
                           000001   325 	ar1 = 0x01
                           000000   326 	ar0 = 0x00
                                    327 ;	preemptive.c:98: TMOD = 0; // timer 0 mode 0
      000000 75 89 00         [24]  328 	mov	_TMOD,#0x00
                                    329 ;	preemptive.c:99: IE = 0x82;
      000003 75 A8 82         [24]  330 	mov	_IE,#0x82
                                    331 ;	preemptive.c:102: TR0 = 1; // set bit TR0 to start running timer 0
                                    332 ;	assignBit
      000006 D2 8C            [12]  333 	setb	_TR0
                                    334 ;	preemptive.c:103: currID = ThreadCreate(main);
      000008 90r00r00         [24]  335 	mov	dptr,#_main
      00000B 12r00r23         [24]  336 	lcall	_ThreadCreate
      00000E 85 82 31         [24]  337 	mov	_currID,dpl
                                    338 ;	preemptive.c:104: RESTORESTATE;
      000011 E5 31            [12]  339 	mov	a,_currID
      000013 24 37            [12]  340 	add	a,#_savedSP
      000015 F9               [12]  341 	mov	r1,a
      000016 87 81            [24]  342 	mov	_SP,@r1
      000018 D0 D0            [24]  343 	POP PSW 
      00001A D0 83            [24]  344 	POP DPH 
      00001C D0 82            [24]  345 	POP DPL 
      00001E D0 F0            [24]  346 	POP B 
      000020 D0 E0            [24]  347 	POP ACC 
                                    348 ;	preemptive.c:106: }
      000022 22               [24]  349 	ret
                                    350 ;------------------------------------------------------------
                                    351 ;Allocation info for local variables in function 'ThreadCreate'
                                    352 ;------------------------------------------------------------
                                    353 ;fp                        Allocated to registers 
                                    354 ;------------------------------------------------------------
                                    355 ;	preemptive.c:114: ThreadID ThreadCreate(FunctionPtr fp)
                                    356 ;	-----------------------------------------
                                    357 ;	 function ThreadCreate
                                    358 ;	-----------------------------------------
      000023                        359 _ThreadCreate:
      000023 D3               [12]  360 	setb	c
      000024 10 AF 01         [24]  361 	jbc	ea,00127$
      000027 C3               [12]  362 	clr	c
      000028                        363 00127$:
      000028 C0 D0            [24]  364 	push	psw
                                    365 ;	preemptive.c:121: if (bitmap == 15)
      00002A 74 0F            [12]  366 	mov	a,#0x0f
      00002C B5*30 06         [24]  367 	cjne	a,_bitmap,00102$
                                    368 ;	preemptive.c:122: return -1;
      00002F 75 82 FF         [24]  369 	mov	dpl,#0xff
      000032 02r00rBB         [24]  370 	ljmp	00109$
      000035                        371 00102$:
                                    372 ;	preemptive.c:135: for (i = 0;i < 4;i ++){
      000035 75 3E 00         [24]  373 	mov	_i,#0x00
      000038                        374 00107$:
      000038 74 FC            [12]  375 	mov	a,#0x100 - 0x04
      00003A 25 3E            [12]  376 	add	a,_i
      00003C 40 41            [24]  377 	jc	00105$
                                    378 ;	preemptive.c:136: if (!(bitmap & (1 << i))){
      00003E AF 3E            [24]  379 	mov	r7,_i
      000040 8F F0            [24]  380 	mov	b,r7
      000042 05 F0            [12]  381 	inc	b
      000044 7F 01            [12]  382 	mov	r7,#0x01
      000046 7E 00            [12]  383 	mov	r6,#0x00
      000048 80 06            [24]  384 	sjmp	00132$
      00004A                        385 00131$:
      00004A EF               [12]  386 	mov	a,r7
      00004B 2F               [12]  387 	add	a,r7
      00004C FF               [12]  388 	mov	r7,a
      00004D EE               [12]  389 	mov	a,r6
      00004E 33               [12]  390 	rlc	a
      00004F FE               [12]  391 	mov	r6,a
      000050                        392 00132$:
      000050 D5 F0 F7         [24]  393 	djnz	b,00131$
      000053 AC*30            [24]  394 	mov	r4,_bitmap
      000055 7D 00            [12]  395 	mov	r5,#0x00
      000057 EC               [12]  396 	mov	a,r4
      000058 52 07            [12]  397 	anl	ar7,a
      00005A ED               [12]  398 	mov	a,r5
      00005B 52 06            [12]  399 	anl	ar6,a
      00005D EF               [12]  400 	mov	a,r7
      00005E 4E               [12]  401 	orl	a,r6
      00005F 70 17            [24]  402 	jnz	00108$
                                    403 ;	preemptive.c:138: bitmap |= (1 << i);
      000061 AF 3E            [24]  404 	mov	r7,_i
      000063 8F F0            [24]  405 	mov	b,r7
      000065 05 F0            [12]  406 	inc	b
      000067 74 01            [12]  407 	mov	a,#0x01
      000069 80 02            [24]  408 	sjmp	00136$
      00006B                        409 00134$:
      00006B 25 E0            [12]  410 	add	a,acc
      00006D                        411 00136$:
      00006D D5 F0 FB         [24]  412 	djnz	b,00134$
      000070 FF               [12]  413 	mov	r7,a
      000071 42*30            [12]  414 	orl	_bitmap,a
                                    415 ;	preemptive.c:139: newID = i;
      000073 85 3E 33         [24]  416 	mov	_newID,_i
                                    417 ;	preemptive.c:140: break;
      000076 80 07            [24]  418 	sjmp	00105$
      000078                        419 00108$:
                                    420 ;	preemptive.c:135: for (i = 0;i < 4;i ++){
      000078 E5 3E            [12]  421 	mov	a,_i
      00007A 04               [12]  422 	inc	a
      00007B F5 3E            [12]  423 	mov	_i,a
      00007D 80 B9            [24]  424 	sjmp	00107$
      00007F                        425 00105$:
                                    426 ;	preemptive.c:147: new_stk = (0x3F) + (0x10)*newID;
      00007F E5 33            [12]  427 	mov	a,_newID
      000081 C4               [12]  428 	swap	a
      000082 54 F0            [12]  429 	anl	a,#0xf0
      000084 FF               [12]  430 	mov	r7,a
      000085 24 3F            [12]  431 	add	a,#0x3f
      000087 F5 3D            [12]  432 	mov	_new_stk,a
                                    433 ;	preemptive.c:152: temp_SP = SP;
      000089 85 81 3B         [24]  434 	mov	_temp_SP,_SP
                                    435 ;	preemptive.c:153: SP = new_stk;
      00008C 85 3D 81         [24]  436 	mov	_SP,_new_stk
                                    437 ;	preemptive.c:167: __endasm;
      00008F C0 82            [24]  438 	PUSH	DPL
      000091 C0 83            [24]  439 	PUSH	DPH
                                    440 ;	preemptive.c:181: __endasm;
      000093 74 00            [12]  441 	MOV	A, #0
      000095 C0 E0            [24]  442 	PUSH	ACC
      000097 C0 E0            [24]  443 	PUSH	ACC
      000099 C0 E0            [24]  444 	PUSH	ACC
      00009B C0 E0            [24]  445 	PUSH	ACC
                                    446 ;	preemptive.c:195: temp_PSW = PSW;
      00009D 85 D0 3C         [24]  447 	mov	_temp_PSW,_PSW
                                    448 ;	preemptive.c:196: PSW = newID << 3;
      0000A0 E5 33            [12]  449 	mov	a,_newID
      0000A2 FF               [12]  450 	mov	r7,a
      0000A3 C4               [12]  451 	swap	a
      0000A4 03               [12]  452 	rr	a
      0000A5 54 F8            [12]  453 	anl	a,#0xf8
      0000A7 F5 D0            [12]  454 	mov	_PSW,a
                                    455 ;	preemptive.c:199: __endasm;
      0000A9 C0 D0            [24]  456 	PUSH	PSW
                                    457 ;	preemptive.c:200: PSW = temp_PSW;
      0000AB 85 3C D0         [24]  458 	mov	_PSW,_temp_PSW
                                    459 ;	preemptive.c:205: savedSP[newID] = SP;
      0000AE E5 33            [12]  460 	mov	a,_newID
      0000B0 24 37            [12]  461 	add	a,#_savedSP
      0000B2 F8               [12]  462 	mov	r0,a
      0000B3 A6 81            [24]  463 	mov	@r0,_SP
                                    464 ;	preemptive.c:209: SP = temp_SP;
      0000B5 85 3B 81         [24]  465 	mov	_SP,_temp_SP
                                    466 ;	preemptive.c:213: return newID;
      0000B8 85 33 82         [24]  467 	mov	dpl,_newID
      0000BB                        468 00109$:
                                    469 ;	preemptive.c:216: }
      0000BB D0 D0            [24]  470 	pop	psw
      0000BD 92 AF            [24]  471 	mov	ea,c
      0000BF 22               [24]  472 	ret
                                    473 ;------------------------------------------------------------
                                    474 ;Allocation info for local variables in function 'ThreadYield'
                                    475 ;------------------------------------------------------------
                                    476 ;	preemptive.c:225: void ThreadYield(void)
                                    477 ;	-----------------------------------------
                                    478 ;	 function ThreadYield
                                    479 ;	-----------------------------------------
      0000C0                        480 _ThreadYield:
      0000C0 D3               [12]  481 	setb	c
      0000C1 10 AF 01         [24]  482 	jbc	ea,00122$
      0000C4 C3               [12]  483 	clr	c
      0000C5                        484 00122$:
      0000C5 C0 D0            [24]  485 	push	psw
                                    486 ;	preemptive.c:227: SAVESTATE;
      0000C7 C0 E0            [24]  487 	PUSH ACC 
      0000C9 C0 F0            [24]  488 	PUSH B 
      0000CB C0 82            [24]  489 	PUSH DPL 
      0000CD C0 83            [24]  490 	PUSH DPH 
      0000CF C0 D0            [24]  491 	PUSH PSW 
      0000D1 E5 31            [12]  492 	mov	a,_currID
      0000D3 24 37            [12]  493 	add	a,#_savedSP
      0000D5 F8               [12]  494 	mov	r0,a
      0000D6 A6 81            [24]  495 	mov	@r0,_SP
                                    496 ;	preemptive.c:229: do
      0000D8                        497 00103$:
                                    498 ;	preemptive.c:241: currID = ((currID >= 3)? 0 : (currID + 1));
      0000D8 C3               [12]  499 	clr	c
      0000D9 E5 31            [12]  500 	mov	a,_currID
      0000DB 94 03            [12]  501 	subb	a,#0x03
      0000DD 92*00            [24]  502 	mov	_ThreadYield_sloc0_1_0,c
      0000DF 40 06            [24]  503 	jc	00108$
      0000E1 7E 00            [12]  504 	mov	r6,#0x00
      0000E3 7F 00            [12]  505 	mov	r7,#0x00
      0000E5 80 09            [24]  506 	sjmp	00109$
      0000E7                        507 00108$:
      0000E7 AD 31            [24]  508 	mov	r5,_currID
      0000E9 0D               [12]  509 	inc	r5
      0000EA ED               [12]  510 	mov	a,r5
      0000EB FE               [12]  511 	mov	r6,a
      0000EC 33               [12]  512 	rlc	a
      0000ED 95 E0            [12]  513 	subb	a,acc
      0000EF FF               [12]  514 	mov	r7,a
      0000F0                        515 00109$:
      0000F0 8E 31            [24]  516 	mov	_currID,r6
                                    517 ;	preemptive.c:242: if (bitmap & (1 << currID)){
      0000F2 AF 31            [24]  518 	mov	r7,_currID
      0000F4 8F F0            [24]  519 	mov	b,r7
      0000F6 05 F0            [12]  520 	inc	b
      0000F8 7F 01            [12]  521 	mov	r7,#0x01
      0000FA 7E 00            [12]  522 	mov	r6,#0x00
      0000FC 80 06            [24]  523 	sjmp	00125$
      0000FE                        524 00124$:
      0000FE EF               [12]  525 	mov	a,r7
      0000FF 2F               [12]  526 	add	a,r7
      000100 FF               [12]  527 	mov	r7,a
      000101 EE               [12]  528 	mov	a,r6
      000102 33               [12]  529 	rlc	a
      000103 FE               [12]  530 	mov	r6,a
      000104                        531 00125$:
      000104 D5 F0 F7         [24]  532 	djnz	b,00124$
      000107 AC*30            [24]  533 	mov	r4,_bitmap
      000109 7D 00            [12]  534 	mov	r5,#0x00
      00010B EC               [12]  535 	mov	a,r4
      00010C 52 07            [12]  536 	anl	ar7,a
      00010E ED               [12]  537 	mov	a,r5
      00010F 52 06            [12]  538 	anl	ar6,a
      000111 EF               [12]  539 	mov	a,r7
      000112 4E               [12]  540 	orl	a,r6
      000113 60 C3            [24]  541 	jz	00103$
                                    542 ;	preemptive.c:248: RESTORESTATE;
      000115 E5 31            [12]  543 	mov	a,_currID
      000117 24 37            [12]  544 	add	a,#_savedSP
      000119 F9               [12]  545 	mov	r1,a
      00011A 87 81            [24]  546 	mov	_SP,@r1
      00011C D0 D0            [24]  547 	POP PSW 
      00011E D0 83            [24]  548 	POP DPH 
      000120 D0 82            [24]  549 	POP DPL 
      000122 D0 F0            [24]  550 	POP B 
      000124 D0 E0            [24]  551 	POP ACC 
                                    552 ;	preemptive.c:249: }
      000126 D0 D0            [24]  553 	pop	psw
      000128 92 AF            [24]  554 	mov	ea,c
      00012A 22               [24]  555 	ret
                                    556 ;------------------------------------------------------------
                                    557 ;Allocation info for local variables in function 'myTimer0Handler'
                                    558 ;------------------------------------------------------------
                                    559 ;	preemptive.c:251: void myTimer0Handler(void){
                                    560 ;	-----------------------------------------
                                    561 ;	 function myTimer0Handler
                                    562 ;	-----------------------------------------
      00012B                        563 _myTimer0Handler:
                                    564 ;	preemptive.c:252: EA = 0;
                                    565 ;	assignBit
      00012B C2 AF            [12]  566 	clr	_EA
                                    567 ;	preemptive.c:253: SAVESTATE;
      00012D C0 E0            [24]  568 	PUSH ACC 
      00012F C0 F0            [24]  569 	PUSH B 
      000131 C0 82            [24]  570 	PUSH DPL 
      000133 C0 83            [24]  571 	PUSH DPH 
      000135 C0 D0            [24]  572 	PUSH PSW 
      000137 E5 31            [12]  573 	mov	a,_currID
      000139 24 37            [12]  574 	add	a,#_savedSP
      00013B F8               [12]  575 	mov	r0,a
      00013C A6 81            [24]  576 	mov	@r0,_SP
                                    577 ;	preemptive.c:271: __endasm;
      00013E E8               [12]  578 	MOV	A, R0
      00013F C0 E0            [24]  579 	PUSH	ACC
      000141 E9               [12]  580 	MOV	A, R1
      000142 C0 E0            [24]  581 	PUSH	ACC
      000144 EA               [12]  582 	MOV	A, R2
      000145 C0 E0            [24]  583 	PUSH	ACC
      000147 EB               [12]  584 	MOV	A, R3
      000148 C0 E0            [24]  585 	PUSH	ACC
      00014A EC               [12]  586 	MOV	A, R4
      00014B C0 E0            [24]  587 	PUSH	ACC
      00014D ED               [12]  588 	MOV	A, R5
      00014E C0 E0            [24]  589 	PUSH	ACC
      000150 EE               [12]  590 	MOV	A, R6
      000151 C0 E0            [24]  591 	PUSH	ACC
      000153 EF               [12]  592 	MOV	A, R7
      000154 C0 E0            [24]  593 	PUSH	ACC
                                    594 ;	preemptive.c:273: do{
      000156                        595 00114$:
                                    596 ;	preemptive.c:274: currID = (currID < 3 ) ?  currID+1 : 0;
      000156 74 FD            [12]  597 	mov	a,#0x100 - 0x03
      000158 25 31            [12]  598 	add	a,_currID
      00015A 40 0B            [24]  599 	jc	00119$
      00015C AF 31            [24]  600 	mov	r7,_currID
      00015E 0F               [12]  601 	inc	r7
      00015F EF               [12]  602 	mov	a,r7
      000160 FE               [12]  603 	mov	r6,a
      000161 33               [12]  604 	rlc	a
      000162 95 E0            [12]  605 	subb	a,acc
      000164 FF               [12]  606 	mov	r7,a
      000165 80 04            [24]  607 	sjmp	00120$
      000167                        608 00119$:
      000167 7E 00            [12]  609 	mov	r6,#0x00
      000169 7F 00            [12]  610 	mov	r7,#0x00
      00016B                        611 00120$:
      00016B 8E 31            [24]  612 	mov	_currID,r6
                                    613 ;	preemptive.c:275: if( currID == 0 )nextID = 1;
      00016D E5 31            [12]  614 	mov	a,_currID
      00016F 70 05            [24]  615 	jnz	00110$
      000171 75 32 01         [24]  616 	mov	_nextID,#0x01
      000174 80 1C            [24]  617 	sjmp	00111$
      000176                        618 00110$:
                                    619 ;	preemptive.c:276: else if( currID == 1 )nextID = 2;
      000176 74 01            [12]  620 	mov	a,#0x01
      000178 B5 31 05         [24]  621 	cjne	a,_currID,00107$
      00017B 75 32 02         [24]  622 	mov	_nextID,#0x02
      00017E 80 12            [24]  623 	sjmp	00111$
      000180                        624 00107$:
                                    625 ;	preemptive.c:277: else if( currID == 2 )nextID = 4;
      000180 74 02            [12]  626 	mov	a,#0x02
      000182 B5 31 05         [24]  627 	cjne	a,_currID,00104$
      000185 75 32 04         [24]  628 	mov	_nextID,#0x04
      000188 80 08            [24]  629 	sjmp	00111$
      00018A                        630 00104$:
                                    631 ;	preemptive.c:278: else if( currID == 3 )nextID = 8;
      00018A 74 03            [12]  632 	mov	a,#0x03
      00018C B5 31 03         [24]  633 	cjne	a,_currID,00111$
      00018F 75 32 08         [24]  634 	mov	_nextID,#0x08
      000192                        635 00111$:
                                    636 ;	preemptive.c:279: if( bitmap & nextID ){
      000192 E5 32            [12]  637 	mov	a,_nextID
      000194 55*30            [12]  638 	anl	a,_bitmap
      000196 60 BE            [24]  639 	jz	00114$
                                    640 ;	preemptive.c:301: __endasm;  
      000198 D0 E0            [24]  641 	POP	ACC
      00019A FF               [12]  642 	MOV	R7, A
      00019B D0 E0            [24]  643 	POP	ACC
      00019D FE               [12]  644 	MOV	R6, A
      00019E D0 E0            [24]  645 	POP	ACC
      0001A0 FD               [12]  646 	MOV	R5, A
      0001A1 D0 E0            [24]  647 	POP	ACC
      0001A3 FC               [12]  648 	MOV	R4, A
      0001A4 D0 E0            [24]  649 	POP	ACC
      0001A6 FB               [12]  650 	MOV	R3, A
      0001A7 D0 E0            [24]  651 	POP	ACC
      0001A9 FA               [12]  652 	MOV	R2, A
      0001AA D0 E0            [24]  653 	POP	ACC
      0001AC F9               [12]  654 	MOV	R1, A
      0001AD D0 E0            [24]  655 	POP	ACC
      0001AF F8               [12]  656 	MOV	R0, A
                                    657 ;	preemptive.c:303: RESTORESTATE;
      0001B0 E5 31            [12]  658 	mov	a,_currID
      0001B2 24 37            [12]  659 	add	a,#_savedSP
      0001B4 F9               [12]  660 	mov	r1,a
      0001B5 87 81            [24]  661 	mov	_SP,@r1
      0001B7 D0 D0            [24]  662 	POP PSW 
      0001B9 D0 83            [24]  663 	POP DPH 
      0001BB D0 82            [24]  664 	POP DPL 
      0001BD D0 F0            [24]  665 	POP B 
      0001BF D0 E0            [24]  666 	POP ACC 
                                    667 ;	preemptive.c:304: EA = 1;
                                    668 ;	assignBit
      0001C1 D2 AF            [12]  669 	setb	_EA
                                    670 ;	preemptive.c:307: __endasm;
      0001C3 32               [24]  671 	RETI
                                    672 ;	preemptive.c:308: }
      0001C4 22               [24]  673 	ret
                                    674 ;------------------------------------------------------------
                                    675 ;Allocation info for local variables in function 'ThreadExit'
                                    676 ;------------------------------------------------------------
                                    677 ;	preemptive.c:315: void ThreadExit(void)
                                    678 ;	-----------------------------------------
                                    679 ;	 function ThreadExit
                                    680 ;	-----------------------------------------
      0001C5                        681 _ThreadExit:
      0001C5 D3               [12]  682 	setb	c
      0001C6 10 AF 01         [24]  683 	jbc	ea,00103$
      0001C9 C3               [12]  684 	clr	c
      0001CA                        685 00103$:
      0001CA C0 D0            [24]  686 	push	psw
                                    687 ;	preemptive.c:324: RESTORESTATE;
      0001CC E5 31            [12]  688 	mov	a,_currID
      0001CE 24 37            [12]  689 	add	a,#_savedSP
      0001D0 F9               [12]  690 	mov	r1,a
      0001D1 87 81            [24]  691 	mov	_SP,@r1
      0001D3 D0 D0            [24]  692 	POP PSW 
      0001D5 D0 83            [24]  693 	POP DPH 
      0001D7 D0 82            [24]  694 	POP DPL 
      0001D9 D0 F0            [24]  695 	POP B 
      0001DB D0 E0            [24]  696 	POP ACC 
                                    697 ;	preemptive.c:325: }
      0001DD D0 D0            [24]  698 	pop	psw
      0001DF 92 AF            [24]  699 	mov	ea,c
      0001E1 22               [24]  700 	ret
                                    701 	.area CSEG    (CODE)
                                    702 	.area CONST   (CODE)
                                    703 	.area XINIT   (CODE)
                                    704 	.area CABS    (ABS,CODE)
